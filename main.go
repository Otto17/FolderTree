// Copyright (c) 2025 Otto
// –õ–∏—Ü–µ–Ω–∑–∏—è: MIT (—Å–º. LICENSE)

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

const CurrentVersion = "28.10.25" // –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è FolderTree –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥"

// Node —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
type Node struct {
	Name     string  // C–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	Path     string  // C–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —É–∑–ª–∞
	IsDir    bool    // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
	Children []*Node // –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
}

func main() {
	// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ—Ä—Å–∏—é FolderTree
	if len(os.Args) >= 2 && strings.EqualFold(os.Args[1], "--version") {
		fmt.Printf("–í–µ—Ä—Å–∏—è \"FolderTree\": %s\n", CurrentVersion)
		return
	}

	if len(os.Args) < 2 {
		// –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.")
		os.Exit(1)
	}

	dirPath := strings.Join(os.Args[1:], " ") // –°–æ–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –ø—É—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã

	info, err := os.Stat(dirPath)
	if err != nil {
		// –°–æ–æ–±—â–∞–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
		fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ '%s': %v\n", dirPath, err)
		os.Exit(1)
	}

	if !info.IsDir() {
		// –°–æ–æ–±—â–∞–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
		fmt.Printf("–û—à–∏–±–∫–∞: '%s' ‚Äî —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.\n", dirPath)
		os.Exit(1)
	}

	exePath, err := os.Executable()
	if err != nil {
		// –°–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %v\n", err)
		os.Exit(1)
	}
	exeDir := filepath.Dir(exePath)

	root, err := buildNode(dirPath)
	if err != nil {
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –ø—É—Ç–∏
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞: %v\n", err)
		os.Exit(1)
	}

	// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ ---

	unicodeText := renderUnicodeTree(root)
	err = os.WriteFile(filepath.Join(exeDir, "–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫.txt"), []byte(unicodeText), 0644)
	if err != nil {
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫.txt': %v\n", err)
	}

	mdText := renderMarkdown(root)
	err = os.WriteFile(filepath.Join(exeDir, "–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (Markdown).md"), []byte(mdText), 0644)
	if err != nil {
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (Markdown).md': %v\n", err)
	}

	htmlText := renderHTML(root)
	err = os.WriteFile(filepath.Join(exeDir, "–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (WEB).html"), []byte(htmlText), 0644)
	if err != nil {
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Ç—Ä–µ—Ç—å–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (WEB).html': %v\n", err)
	}

	// –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫—É–¥–∞ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	fmt.Printf("–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏ \"%s\":\n", exeDir)
	fmt.Println(" - –î—Ä–µ–≤–æ –ø–∞–ø–æ–∫.txt")
	fmt.Println(" - –î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (Markdown).md")
	fmt.Println(" - –î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (WEB).html")
	//fmt.Println("–ì–æ—Ç–æ–≤–æ: '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫.txt', '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (Markdown).md', '–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (WEB).html' —Å–æ–∑–¥–∞–Ω—ã –≤", exeDir)
}

// buildNode —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Node –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
func buildNode(path string) (*Node, error) {
	info, err := os.Stat(path)
	if err != nil {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
		return nil, err
	}
	node := &Node{
		Name:  info.Name(),
		Path:  path,
		IsDir: info.IsDir(),
	}
	if node.IsDir {
		entries, err := os.ReadDir(path)
		if err != nil {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
			return node, err
		}
		sort.Slice(entries, func(i, j int) bool { return strings.ToLower(entries[i].Name()) < strings.ToLower(entries[j].Name()) })
		// –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –≤—ã–≥–ª—è–¥–µ–ª –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
		for _, e := range entries {
			childPath := filepath.Join(path, e.Name())
			child, err := buildNode(childPath)
			if err != nil {
				// –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É–∑–µ–ª, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –Ω–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, symlink loop –∏–ª–∏ EPERM)
				continue
			}
			node.Children = append(node.Children, child)
		}
	}
	return node, nil
}

// renderUnicodeTree –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ Unicode
func renderUnicodeTree(root *Node) string {
	var sb strings.Builder
	sb.WriteString(root.Name + "\n")
	renderUnicodeChildren(&sb, root, "")
	// –í—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	return sb.String()
}

// renderUnicodeChildren —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ Unicode
func renderUnicodeChildren(sb *strings.Builder, node *Node, prefix string) {
	for i, child := range node.Children {
		isLast := i == len(node.Children)-1
		if isLast {
			// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è L-–æ–±—Ä–∞–∑–Ω—ã–π —Å–∏–º–≤–æ–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
			sb.WriteString(prefix + "‚îî‚îÄ‚îÄ ")
		} else {
			// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è T-–æ–±—Ä–∞–∑–Ω—ã–π —Å–∏–º–≤–æ–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞ –Ω–∏–º —Å–ª–µ–¥—É—é—Ç –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
			sb.WriteString(prefix + "‚îú‚îÄ‚îÄ ")
		}

		if child.IsDir {
			sb.WriteString(child.Name + "/\n")
		} else {
			sb.WriteString(child.Name + "\n")
		}

		if child.IsDir {
			if isLast {
				// –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã, —á—Ç–æ–±—ã –≤–µ—Ç–∫–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
				renderUnicodeChildren(sb, child, prefix+"    ")
			} else {
				// –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–µ—Ç–∫–∏
				renderUnicodeChildren(sb, child, prefix+"‚îÇ   ")
			}
		}
	}
}

// renderMarkdown –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
func renderMarkdown(root *Node) string {
	var sb strings.Builder
	//sb.WriteString("# –î–µ—Ä–µ–≤–æ: " + root.Name + "\n\n")
	renderMDNode(&sb, root, 0)
	return sb.String()
}

// renderMDNode —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ Markdown
func renderMDNode(sb *strings.Builder, n *Node, depth int) {
	indent := strings.Repeat("  ", depth)
	if depth == 0 {
		// –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –≥–ª–∞–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
		sb.WriteString(indent + "üìÅ **" + n.Name + "**\n")
	} else {
		if n.IsDir {
			// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏ —Å–∏–º–≤–æ–ª–æ–º –ø–∞–ø–∫–∏
			sb.WriteString(indent + "- üìÅ **" + n.Name + "**\n")
		} else {
			// –§–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏–º–≤–æ–ª –ª–∏—Å—Ç–∞ –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
			sb.WriteString(indent + "- üìÑ " + n.Name + "\n")
		}
	}
	for _, c := range n.Children {
		renderMDNode(sb, c, depth+1)
	}
}

// renderHTML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â—É—é –¥–µ—Ä–µ–≤–æ
func renderHTML(root *Node) string {
	var sb strings.Builder
	// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –∏ —Å—Ç–∏–ª–∏
	sb.WriteString(`<!doctype html>
<html lang="ru">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>–î—Ä–µ–≤–æ –ø–∞–ø–æ–∫ (WEB)</title>
<style>
body { font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; padding: 18px; background:#f7f7fb; color:#111 }
.container { max-width: 1100px; margin: 0 auto; background: #fff; padding: 18px; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,0.06); }
details { margin-left: 8px; }
summary { cursor: pointer; font-weight: 600; padding: 4px 0; }
.file { margin-left: 22px; padding: 2px 0; font-family: monospace; }
.meta { color:#666; font-size: 0.85em; margin-left:8px; }
.root { text-align: center; font-weight: 800; font-size: 1.35em; margin-bottom: 6px }
.small { font-size:0.9em; color:#666 }
</style>
</head>
<body>
<div class="container">
<div class="root">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∏–∫–∞–º–∏)</div>
<hr/>
`)
	buildHTMLNode(&sb, root)
	// –ó–∞–≤–µ—Ä—à–∞–µ—Ç HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	sb.WriteString(`
</div>
</body>
</html>
`)
	return sb.String()
}

// buildHTMLNode —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–≥–æ–≤ details –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
func buildHTMLNode(sb *strings.Builder, n *Node) {
	for _, c := range n.Children {
		if c.IsDir {
			// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç details/summary –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Å–µ–∫—Ü–∏–π
			sb.WriteString("<details open>\n")
			sb.WriteString("<summary>üìÅ " + escapeHTML(c.Name) + "/</summary>\n")
			buildHTMLNode(sb, c)
			sb.WriteString("</details>\n")
		} else {
			// –§–∞–π–ª—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ div
			sb.WriteString("<div class=\"file\">üìÑ " + escapeHTML(c.Name) + "</div>\n")
		}
	}
}

// escapeHTML –∑–∞–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML –Ω–∞ –∏—Ö —Å—É—â–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
func escapeHTML(s string) string {
	r := strings.ReplaceAll(s, "&", "&amp;")
	r = strings.ReplaceAll(r, "<", "&lt;")
	r = strings.ReplaceAll(r, ">", "&gt;")
	return r
}
